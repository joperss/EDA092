			+--------------------+
			|    EDA092/DIT400   |
			| LAB ASSIGNMENT 2:  |
			| 	THREADS      |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP B6 ----

>> Fill in the group number, names and email addresses of your group members.

Fredrik Boldizar <frebol@student.chalmers.se>
Johan Persson <joperss@student.chalmers.se>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Man pages
Stackoverflow.com

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in thread.h:
   struct thread:
      int64_t time_wait;        /* Number of ticks to wait */
      int64_t start_time;       /* Starting time of sleep */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A check is made for if the specified wait time is greater than 0.
Then, we assert that interrupts are on.
The variables time_wait and start_time are given their appropriate values.
Interrupts are disabled for blocking, then reenabled.

Every interrupt, we have added checking of each thread. We check for if a
blocked thread is a sleeping thread, or simply blocked. 
If it is a sleeping thread, we check for if the elapsed time is equal to 
or greater than time_wait. If so, unblock the thread and reset time_wait.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The checks are fairly minimal. We are also using nested checks.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Every thread has its own variables. Thereby, no race conditions exist.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

During blocking, timer interrupts must be disabled. If unfortunate interrupts occur,
the start_time may be somewhat higher than originally intended (by a few ticks), but
we consider this to be acceptable.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We considered a similar approach, but instead of having a time_wait and a start_time,
we would simply use time_wait which we would decrement each time we checked. However,
this way, atleast the way we were thinking of implementing it, would require both a 
decrement operation and a check =0, which we thought would be more time-consuming than
our current solution. There would also be a few more possible complications regarding 
checking if a thread is sleeping or blocked through other sources.

			    BATCH SCHEDULING
			    ================
---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, semaphore, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in batch-scheduler.c:
    struct semaphore busSema;           /* A semaphore for managing the number of tasks on the bus */
    struct semaphore HighPriority;      /* A semaphore used to indicate that there are high priority tasks
                                           waiting for bus access */
    struct semaphore senders;           /* A semaphore used to indicate that there are sender tasks waiting
                                           for bus access */ 
    struct semaphore receivers;         /* A semaphore used to indicate that there are receiver tasks
                                           waiting for the bus */
    volatile int direction = 0;         /* Indicates the direction of the bus */
    volatile int HP = 1;                /* Indicates that there are high priority tasks waiting for bus access,
                                           used to prevent lower priority tasks from accessing the bus */


---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 tasks
>> are using the bus in the same direction?

We initialize busSema to 3, thus only allowing 3 task on the bus at once.

>> C2: What prevents tasks from opposite directions from using the
>> bus simultaneously?

We make tasks wait for the direction of the bus to change to the direction of the task before requesting
the bus semaphore. The direction is changed when there are no more tasks in the current direction.

>> C3: How does your solution grant priority to high priority tasks over
>> the waiting tasks in the same direction?

We make normal priority tasks wait until there are no high priority tasks waiting for the bus, i.e. by
waiting for the HP variable to become 0, before requesting access to the bus. Additionally, since the
semaphore we use for bus access is shared between low and high priority tasks, we make sure that no more
than 1 low priority task stand in queue for the busSema.

>> C4: How do you guarantee that despite having priority, high priority
>> tasks do not start using the bus while there are still still using
>> it in the oposite direction?

Same as C2, by checking the direction of the bus before requesting access (but after announcing that it's
waiting for access, thereby preventing additional low priority tasks from the other direction to request
access to the bus).

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design 
>> alternatives? In what ways is it superior to another design you considered?

We considered having multiple semaphores to handle bus access, but having a single semaphore for the bus
seemed more natural to us when adding functionality in steps as well as resulting in simpler logic.

			   SURVEY QUESTIONS (optional)
			   ===========================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters?

>> Any other comments?
